import ply.yacc as yacc
from lexer import tokens

# this was done manually, but:
# https://github.com/dabeaz/ply/tree/master/example/yply

# more_params:
# 	expression
# 	| expression ',' more_params
# 	{
# 	  $$ = nseel_createMoreParametersOpcode(context,$1,$3);
# 	}
# 	;

def p_more_params(p):
    '''more_params : expression
        | expression ',' more_params
    '''
    pass
#
# string:
#         STRING_LITERAL
#         | STRING_LITERAL string
#         {
#           ((struct eelStringSegmentRec *)$1)->_next = (struct eelStringSegmentRec *)$2;
#           $$ = $1;
#         }
#         ;
#
def p_string(p):
    '''string : STRING_LITERAL
        | STRING_LITERAL string
    '''
    pass

# assignable_value:
# 	IDENTIFIER
#         {
#           if (!($$ = nseel_resolve_named_symbol(context, $1, -1, NULL))) /* convert from purely named to namespace-relative, etc */
#           {
#             yyerror(&yyloc, context, "");
#             YYERROR;
#           }
#         }
#         /* we used to have VALUE in here rather than rvalue, to allow 1=1 1+=2 etc, but silly to,
#            though this breaks Vmorph, which does 1=1 for a nop, and Jonas DrumReaplacer, which does x = 0 = y = 0 */
# 	| '(' expression ')'
# 	{
# 	  $$ = $2;
# 	}
# 	| IDENTIFIER '(' expression ')' '(' expression ')'
# 	{
#           int err;
#   	  if (!($$ = nseel_setCompiledFunctionCallParameters(context,$1, $3, 0, 0, $6, &err)))
#           {
#             if (err == -1) yyerror(&yylsp[-2], context, "");
#             else if (err == 0) yyerror(&yylsp[-6], context, "");
#             else yyerror(&yylsp[-3], context, ""); // parameter count wrong
#
#             YYERROR;
#           }
# 	}
# 	| IDENTIFIER '(' expression ')'
# 	{
#           int err;
#   	  if (!($$ = nseel_setCompiledFunctionCallParameters(context,$1, $3, 0, 0, 0, &err)))
#           {
#             if (err == 0) yyerror(&yylsp[-3], context, "");
#             else yyerror(&yylsp[0], context, ""); // parameter count wrong
#             YYERROR;
#           }
# 	}
# 	| IDENTIFIER '(' ')'
# 	{
#           int err;
#   	  if (!($$ = nseel_setCompiledFunctionCallParameters(context,$1, nseel_createCompiledValue(context,0.0), 0, 0, 0,&err)))
#           {
#             if (err == 0) yyerror(&yylsp[-2], context, ""); // function not found
#             else yyerror(&yylsp[0], context, ""); // parameter count wrong
#             YYERROR;
#           }
# 	}
# 	| IDENTIFIER '(' expression ',' expression ')'
# 	{
#           int err;
#   	  if (!($$ = nseel_setCompiledFunctionCallParameters(context,$1, $3, $5, 0, 0,&err)))
#           {
#             if (err == 0) yyerror(&yylsp[-5], context, "");
#             else if (err == 2) yyerror(&yylsp[0], context, ""); // needs more than 2 parameters
#             else yyerror(&yylsp[-2], context, ""); // less than 2
#             YYERROR;
#           }
# 	}
# 	| IDENTIFIER '(' expression ',' expression ',' more_params ')'
# 	{
#           int err;
#   	  if (!($$ = nseel_setCompiledFunctionCallParameters(context,$1, $3, $5, $7, 0, &err)))
#           {
#             if (err == 0) yyerror(&yylsp[-7], context, "");
#             else if (err==2) yyerror(&yylsp[0], context, ""); // needs more parameters
#             else if (err==4) yyerror(&yylsp[-4], context, ""); // needs single parameter
#             else yyerror(&yylsp[-2], context, ""); // less parm
#             YYERROR;
#           }
# 	}
#         | rvalue '[' ']'
#         {
# 	  $$ = nseel_createMemoryAccess(context,$1,0);
#         }
#         | rvalue '[' expression ']'
#         {
# 	  $$ = nseel_createMemoryAccess(context,$1,$3);
#         }
#         ;
#

def p_assignable_value(p):
    '''assignable_value : IDENTIFIER
        | '(' expression ')'
        | IDENTIFIER '(' expression ')' '(' expression ')'
        | IDENTIFIER '(' expression ')'
        | IDENTIFIER '(' ')'
        | IDENTIFIER '(' expression ',' expression ')'
        | IDENTIFIER '(' expression ',' expression ',' more_params ')'
        | rvalue '[' ']'
        | rvalue '[' expression ']'
    '''
    pass

def p_value(p):
    '''value : NUM
        | NUM_UNDERZERO
        | HEX
        | MASK
        | E
        | PI
        | PHI
        | CHAR
        '''
    pass

# rvalue:
# 	value
#         | STRING_IDENTIFIER
#         | string
#         {
#           $$ = nseel_eelMakeOpcodeFromStringSegments(context,(struct eelStringSegmentRec *)$1);
#         }
#         | assignable_value
#         ;

def p_rvalue(p):
    '''rvalue : value
        | IDENTIFIER
        | '(' expression ')'
        | IDENTIFIER '(' expression ')' '(' expression ')'
        | IDENTIFIER '(' expression ')'
        | IDENTIFIER '(' ')'
        | IDENTIFIER '(' expression ',' expression ')'
        | IDENTIFIER '(' expression ',' expression ',' more_params ')'
        | rvalue '[' ']'
        | rvalue '[' expression ']'
    '''
    pass

#
# assignment:
#         rvalue
#         | assignable_value '=' if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_ASSIGN,2,$1,$3);
#         }
#         | assignable_value TOKEN_ADD_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_ADD_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_SUB_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_SUB_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_MOD_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_MOD_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_OR_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_OR_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_AND_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_AND_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_XOR_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_XOR_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_DIV_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_DIV_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_MUL_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_MUL_OP,2,$1,$3);
#         }
#         | assignable_value TOKEN_POW_OP if_else_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_POW_OP,2,$1,$3);
#         }
#         | STRING_IDENTIFIER '=' if_else_expr
#         {
#           $$ = nseel_createFunctionByName(context,"strcpy",2,$1,$3,NULL);
#         }
#         | STRING_IDENTIFIER TOKEN_ADD_OP if_else_expr
#         {
#           $$ = nseel_createFunctionByName(context,"strcat",2,$1,$3,NULL);
#         }
#         ;

def p_assignment(p):
    '''assignment : rvalue
        | assignable_value '=' if_else_expr
        | assignable_value TOKEN_ADD_OP if_else_expr
        | assignable_value TOKEN_SUB_OP if_else_expr
        | assignable_value TOKEN_MOD_OP if_else_expr
        | assignable_value TOKEN_OR_OP if_else_expr
        | assignable_value TOKEN_AND_OP if_else_expr
        | assignable_value TOKEN_XOR_OP if_else_expr
        | assignable_value TOKEN_DIV_OP if_else_expr
        | assignable_value TOKEN_MUL_OP if_else_expr
        | assignable_value TOKEN_POW_OP if_else_expr
        | STRING_IDENTIFIER '=' if_else_expr
        | STRING_IDENTIFIER TOKEN_ADD_OP if_else_expr
    '''
    pass


# unary_expr:
#         assignment
# 	| '+' unary_expr
# 	{
# 	  $$ = $2;
# 	}
# 	| '-' unary_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_UMINUS,1,$2,0);
# 	}
# 	| '!' unary_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_NOT,1,$2,0);
# 	}
# 	;

def p_unary_expr(p):
    '''unary_expr : assignment
        | '+' unary_expr
        | '-' unary_expr
        | '!' unary_expr
    '''
    pass

# pow_expr:
#         unary_expr
#         | pow_expr '^' unary_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_POW,2,$1,$3);
#         }
#         ;

def p_pow_expr(p):
    '''pow_expr : unary_expr
        | pow_expr '^' unary_expr
    '''
    pass

# mod_expr:
#         pow_expr
#         | mod_expr '%' pow_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_MOD,2,$1,$3);
#         }
#         | mod_expr TOKEN_SHL pow_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_SHL,2,$1,$3);
#         }
#         | mod_expr TOKEN_SHR pow_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_SHR,2,$1,$3);
#         }
#         ;

def p_mod_expr(p):
    '''mod_expr : pow_expr
         | mod_expr '%' pow_expr
         | mod_expr TOKEN_SHL pow_expr
         | mod_expr TOKEN_SHR pow_expr
    '''
    pass

# div_expr:
# 	mod_expr
# 	| div_expr '/' mod_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_DIVIDE,2,$1,$3);
# 	}
# 	;

def p_div_expr(p):
    '''div_expr : mod_expr
        | div_expr '/' mod_expr
    '''
    pass
#
# mul_expr:
# 	div_expr
# 	| mul_expr '*' div_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_MULTIPLY,2,$1,$3);
# 	}
# 	;

def p_mul_expr(p):
    '''mul_expr : div_expr
        | mul_expr '*' div_expr
    '''
    pass

# sub_expr:
# 	mul_expr
# 	| sub_expr '-' mul_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_SUB,2,$1,$3);
# 	}
# 	;

def p_sub_expr(p):
    '''sub_expr : mul_expr
        | sub_expr '-' mul_expr
    '''
    pass

# add_expr:
# 	sub_expr
# 	| add_expr '+' sub_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_ADD,2,$1,$3);
# 	}
# 	;

def p_add_expr(p):
    '''add_expr : sub_expr
        | add_expr '+' sub_expr
    '''
    pass

# andor_expr:
# 	add_expr
# 	| andor_expr '&' add_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_AND,2,$1,$3);
# 	}
# 	| andor_expr '|' add_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_OR,2,$1,$3);
# 	}
# 	| andor_expr '~' add_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_XOR,2,$1,$3);
# 	}
# 	;

def p_andor_expr(p):
    '''andor_expr : add_expr
        | andor_expr '&' add_expr
        | andor_expr '|' add_expr
        | andor_expr '~' add_expr
    '''
    pass

# cmp_expr:
#         andor_expr
#         | cmp_expr '<' andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_LT,2,$1,$3);
#         }
#         | cmp_expr '>' andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_GT,2,$1,$3);
#         }
#         | cmp_expr TOKEN_LTE andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_LTE,2,$1,$3);
#         }
#         | cmp_expr TOKEN_GTE andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_GTE,2,$1,$3);
#         }
#         | cmp_expr TOKEN_EQ andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_EQ,2,$1,$3);
#         }
#         | cmp_expr TOKEN_EQ_EXACT andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_EQ_EXACT,2,$1,$3);
#         }
#         | cmp_expr TOKEN_NE andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_NE,2,$1,$3);
#         }
#         | cmp_expr TOKEN_NE_EXACT andor_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_NE_EXACT,2,$1,$3);
#         }
#         ;

def p_cmp_expr(p):
    '''cmp_expr : andor_expr
        | cmp_expr '<' andor_expr
        | cmp_expr '>' andor_expr
        | cmp_expr TOKEN_LTE andor_expr
        | cmp_expr TOKEN_GTE andor_expr
        | cmp_expr TOKEN_EQ andor_expr
        | cmp_expr TOKEN_EQ_EXACT andor_expr
        | cmp_expr TOKEN_NE andor_expr
        | cmp_expr TOKEN_NE_EXACT andor_expr
    '''
    pass

# logical_and_or_expr:
#         cmp_expr
#         | logical_and_or_expr TOKEN_LOGICAL_AND cmp_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_LOGICAL_AND,2,$1,$3);
#         }
#         | logical_and_or_expr TOKEN_LOGICAL_OR cmp_expr
#         {
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_LOGICAL_OR,2,$1,$3);
#         }
#         ;

def p_logical_and_or_expr(p):
    '''logical_and_or_expr : cmp_expr
        | logical_and_or_expr TOKEN_LOGICAL_AND cmp_expr
        | logical_and_or_expr TOKEN_LOGICAL_OR cmp_expr
        '''
    pass

# if_else_expr:
#         logical_and_or_expr
#         | logical_and_or_expr '?' if_else_expr ':' if_else_expr
#         {
# 	  $$ = nseel_createIfElse(context, $1, $3, $5);
#         }
#         | logical_and_or_expr '?' ':' if_else_expr
#         {
# 	  $$ = nseel_createIfElse(context, $1, 0, $4);
#         }
#         | logical_and_or_expr '?' if_else_expr
#         {
# 	  $$ = nseel_createIfElse(context, $1, $3, 0);
#         }
#         ;
#

def p_if_else_expr(p):
    '''if_else_expr : logical_and_or_expr
        | logical_and_or_expr '?' if_else_expr ':' if_else_expr
        | logical_and_or_expr '?' ':' if_else_expr
        | logical_and_or_expr '?' if_else_expr
        '''
    pass


# expression:
# 	if_else_expr
# 	| expression ';' if_else_expr
# 	{
# 	  $$ = nseel_createSimpleCompiledFunction(context,FN_JOIN_STATEMENTS,2,$1,$3);
# 	}
# 	| expression ';'
# 	{
# 	  $$ = $1;
# 	}
# 	;

def p_expression(p):
    '''expression : if_else_expr
        | expression ';' if_else_expr
        | expression ';'
        '''
    pass

#
# program:
# 	expression
# 	{
#                 if (@1.first_line) { }
#                 context->result = $1;
# 	}
# 	;

def p_program(p):
    '''program : expression'''

def p_error(t):
    print ("Error")

start = 'program'
parser = yacc.yacc()
